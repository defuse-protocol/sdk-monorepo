import { HotBridge as HotSdk } from "@hot-labs/omni-sdk";
import { InMemorySigner, KeyPair, connect } from "near-api-js";
import { privateKeyToAccount } from "viem/accounts";
import { DirectBridge } from "./bridges/direct-bridge/direct-bridge.ts";
import { HotBridge } from "./bridges/hot-bridge/hot-bridge.ts";
import { PoaBridge } from "./bridges/poa-bridge/poa-bridge.ts";
import { env } from "./env";
import { IntentRelayerPublic } from "./intents/intent-relayer-impl";
import {
	IntentSignerEVM,
	IntentSignerNear,
} from "./intents/intent-signer-impl";
import { CAIP2_NETWORK } from "./lib/caip2";
import { BridgeSDK } from "./sdk";

const nearSignerAccountId = env.SECRET_NEAR_ACCOUNT_ID;
const keypair = KeyPair.fromString(env.SECRET_NEAR_PRIVATE_KEY);
const nearSigner = await InMemorySigner.fromKeyPair(
	"mainnet",
	nearSignerAccountId,
	keypair,
);

const near = await connect({
	networkId: "mainnet",
	nodeUrl: "https://rpc.mainnet.near.org",
	headers: {},
	signer: nearSigner,
});

const sdk = new BridgeSDK({
	bridges: [
		new DirectBridge(),
		new PoaBridge(),
		new HotBridge(
			new HotSdk({
				logger: console,
				evmRpc: {
					137: ["https://polygon-rpc.com/"],
				},
				async executeNearTransaction(tx): Promise<{
					sender: string;
					hash: string;
				}> {
					const account = await near.account(nearSignerAccountId);
					const outcome = await account.signAndSendTransaction(tx);

					return {
						sender: nearSignerAccountId,
						hash: outcome.transaction.hash,
					};
				},
			}),
		),
	],
	intentRelayer: new IntentRelayerPublic(),
});

sdk.setIntentSigner(
	new IntentSignerNear({
		accountId: nearSignerAccountId,
		signer: keypair,
	}),
);

sdk.setIntentSigner(
	new IntentSignerEVM({
		signer: privateKeyToAccount(env.SECRET_EVM_PRIVATE_KEY),
	}),
);

await main();

async function main() {
	await withdrawToPolygon();
	// await withdrawToBase();
}

// biome-ignore lint/correctness/noUnusedVariables: <explanation>
async function withdrawToBase() {
	const withdrawal1 = sdk.createWithdrawal({
		withdrawalParams: {
			bridge: "poa",
			assetId:
				"nep141:base-0x833589fcd6edb6e08f4c7c32d4f71b54bda02913.omft.near",
			amount: 100000n,
			destinationChain: CAIP2_NETWORK.Base,
			destinationAddress: env.SECRET_EVM_ADDRESS,
			destinationMemo: undefined,
		},
	});

	await withdrawal1.process();
}

// biome-ignore lint/correctness/noUnusedVariables: <explanation>
async function withdrawToPolygon() {
	const withdrawal1 = sdk.createWithdrawal({
		withdrawalParams: {
			bridge: "hot",
			assetId: "nep245:v2_1.omni.hot.tg:137_qiStmoQJDQPTebaPjgx5VBxZv6L",
			sourceAddress: "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359",
			// assetId: "nep245:v2_1.omni.hot.tg:137_11111111111111111111",
			// sourceAddress: "native",
			amount: 100_000n,
			destinationChain: CAIP2_NETWORK.Polygon,
			destinationAddress: env.SECRET_EVM_ADDRESS,
			destinationMemo: undefined,
		},
		/*
		intent: {
			// you can override any intent-specific fields
			payload: (intentParams) => {
				return {
					...intentParams,
					// default: 5 mins from now
					deadline: "",
					// default: randomly generated bytes
					nonce: "",
				};
			},
			// you can provide extra quote hashes
			relayParams: () => {
				return { quoteHashes: [] };
			},
		},
		*/
	});

	await withdrawal1.process();
	// or
	// await withdrawal1.estimateFee();
	// await withdrawal1.signAndSendIntent();
	// await withdrawal1.waitForIntentSettlement();
	// await withdrawal1.waitForWithdrawalCompletion();
}

/*
const withdrawal1 = sdk.createWithdrawal({
	withdrawalParams: {
		bridge: "hot",
		assetId: "nep245:v2_1.omni.hot.tg:137_11111111111111111111",
		amount: 1000000000000000000n,
		destinationChain: CAIP2_NETWORK.Polygon,
		destinationAddress: env.SECRET_EVM_ADDRESS,
		destinationMemo: undefined,
	},
	intent: {
		relayParams: (defaultParams) => ({
			...defaultParams,
			quoteHashes: [],
		}),
	},
	// think about how fee is processed: who pays, how many
});

// await withdrawal1.estimate() // <- withdrawal fee

await withdrawal1.process();

// await hotAdapter.hotSdk.clearNonce({
// 	nonce: "1748270353000000014664",
// 	chain: Network.Polygon,
// 	receiver: "0xDEAD698d1Ff2eFca2c4C1f171D6A92dD3b3E5e73",
// });
//
// process.exit(1);

// const nonce = "1748270398000000014665";
// const claimParams = await hotAdapter.hotSdk.buildWithdraw(nonce);
// await hotAdapter.hotSdk.evm.withdraw({
// 	...claimParams,
// 	async sendTransaction(tx) {
// 		const wallet = new ethers.Wallet(
// 			env.SECRET_EVM_PRIVATE_KEY,
// 			new ethers.JsonRpcProvider("https://polygon-rpc.com/"),
// 		);
//
// 		const a = await wallet.sendTransaction({
// 			...tx,
// 		});
// 		return a.hash;
// 	},
// });
*/
