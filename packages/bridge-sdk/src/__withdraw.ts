import { KeyPair } from "near-api-js";
import { privateKeyToAccount } from "viem/accounts";
import { env } from "./env";
import {
	IntentSignerEVM,
	IntentSignerNear,
} from "./intents/intent-signer-impl";
import { BridgeSDK } from "./sdk";

const nearSignerAccountId = env.SECRET_NEAR_ACCOUNT_ID;
const keypair = KeyPair.fromString(env.SECRET_NEAR_PRIVATE_KEY);

const sdk = new BridgeSDK({
	intentSigner: new IntentSignerNear({
		accountId: nearSignerAccountId,
		signer: keypair,
	}),
	evmRpc: {
		137: ["https://polygon-rpc.com/"],
	},
});

// or change the intent signer in runtime
sdk.setIntentSigner(
	new IntentSignerEVM({
		signer: privateKeyToAccount(env.SECRET_EVM_PRIVATE_KEY),
	}),
);

await main();

async function main() {
	// await withdrawToBase();
	// await withdrawToNear();
	// await withdrawToPolygon();
	await withdrawBatch();
}

// biome-ignore lint/correctness/noUnusedVariables: <explanation>
async function withdrawToBase() {
	const withdrawal1 = sdk.createWithdrawal({
		withdrawalParams: {
			assetId:
				"nep141:base-0x833589fcd6edb6e08f4c7c32d4f71b54bda02913.omft.near",
			amount: 100000n,
			destinationAddress: env.SECRET_EVM_ADDRESS,
			destinationMemo: undefined,
			feeInclusive: false,
		},
	});

	await withdrawal1.process();
}

// biome-ignore lint/correctness/noUnusedVariables: <explanation>
async function withdrawToNear() {
	const withdrawal = sdk.createWithdrawal({
		withdrawalParams: {
			assetId: "nep141:wrap.near",
			amount: 100000n,
			destinationAddress:
				"226a0eceead177138b56937a05f8bdb19b4091a5cdc4419bdea07b3ea0bd9195",
			destinationMemo: undefined,
			feeInclusive: false,
		},
	});

	await withdrawal.process();
}

// biome-ignore lint/correctness/noUnusedVariables: <explanation>
async function withdrawToPolygon() {
	// sdk.createWithdrawalWithMultiPayload();

	const withdrawal1 = sdk.createWithdrawal({
		withdrawalParams: {
			assetId: "nep245:v2_1.omni.hot.tg:137_qiStmoQJDQPTebaPjgx5VBxZv6L",
			// assetId: "nep245:v2_1.omni.hot.tg:137_11111111111111111111",
			amount: 100_000n,
			destinationAddress: env.SECRET_EVM_ADDRESS,
			destinationMemo: undefined,
			feeInclusive: false,
		},

		// onBeforeIntentPublish(multiPayload) {},
		/*
		intent: {
			// you can override any intent-specific fields
			payload: (intentParams) => {
				return {
					...intentParams,
					// default: 5 mins from now
					deadline: "",
					// default: randomly generated bytes
					nonce: "",
				};
			},
			// you can provide extra quote hashes
			relayParams: () => {
				return { quoteHashes: [] };
			},
		},
		*/
	});

	// X BTC -> USDC -> FEE??
	// EXACT_OUT BTC -> 0.001 ETH = Y BTC
	// EXACT_IN (X-Y) BTC -> USDC

	// EXACT_IN X BTC -> A USDC
	// EXACT_OUT B BTC -> Y ETH
	// USDC = A - B

	await withdrawal1.process();
	// or
	// await withdrawal1.estimateFee();
	// await withdrawal1.signAndSendIntent();
	// await withdrawal1.waitForIntentSettlement();
	// await withdrawal1.waitForWithdrawalCompletion();
}

// biome-ignore lint/correctness/noUnusedVariables: <explanation>
async function withdrawBatch() {
	const withdrawal1 = sdk.createBatchWithdrawals({
		withdrawalParams: [
			{
				assetId: "nep245:v2_1.omni.hot.tg:137_qiStmoQJDQPTebaPjgx5VBxZv6L",
				// assetId: "nep245:v2_1.omni.hot.tg:137_11111111111111111111",
				amount: 100_000n,
				destinationAddress: env.SECRET_EVM_ADDRESS,
				destinationMemo: undefined,
				feeInclusive: false,
			},
			{
				// assetId: "nep245:v2_1.omni.hot.tg:137_qiStmoQJDQPTebaPjgx5VBxZv6L",
				assetId: "nep245:v2_1.omni.hot.tg:137_11111111111111111111",
				amount: 100000000000000000n,
				destinationAddress: env.SECRET_EVM_ADDRESS,
				destinationMemo: undefined,
				feeInclusive: false,
			},
			{
				assetId:
					"nep141:base-0x833589fcd6edb6e08f4c7c32d4f71b54bda02913.omft.near",
				amount: 1n,
				destinationAddress: env.SECRET_EVM_ADDRESS,
				destinationMemo: undefined,
				feeInclusive: false,
			},
			{
				assetId: "nep141:wrap.near",
				amount: 100000n,
				destinationAddress:
					"226a0eceead177138b56937a05f8bdb19b4091a5cdc4419bdea07b3ea0bd9195",
				destinationMemo: undefined,
				feeInclusive: false,
			},
			// {
			// 	assetId:
			// 		"nep141:base-0x833589fcd6edb6e08f4c7c32d4f71b54bda02913.omft.near",
			// 	amount: 1n,
			// 	destinationAddress: env.SECRET_EVM_ADDRESS,
			// 	destinationMemo: undefined,
			// },
			// {
			// 	assetId:
			// 		"nep141:arb-0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9.omft.near",
			// 	amount: 100000n,
			// 	destinationAddress: env.SECRET_EVM_ADDRESS,
			// 	destinationMemo: undefined,
			// },
		],

		// onBeforeIntentPublish(multiPayload) {},
		/*
		intent: {
			// you can override any intent-specific fields
			payload: (intentParams) => {
				return {
					// default: 5 mins from now
					deadline: "",
					// default: randomly generated bytes
					nonce: "",
				};
			},
			// you can provide extra quote hashes
			relayParams: () => {
				return { quoteHashes: [] };
			},
		},
		*/
	});

	await withdrawal1.process();
	// or
	// await withdrawal1.estimateFee();
	// if (withdrawal1.hasUnprocessableWithdrawals()) {
	// 	console.log(withdrawal1.removeUnprocessableWithdrawals());
	// }
	// await withdrawal1.signAndSendIntent();
	// await withdrawal1.waitForIntentSettlement();
	// await withdrawal1.waitForWithdrawalCompletion();

	// await withdrawal1.signAndSendIntent();
	// await withdrawal1.waitForIntentSettlement();
	// await withdrawal1.waitForWithdrawalCompletion();
}
